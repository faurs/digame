#!/bin/bash
source script_lib

serverBranch='master'
serverTag=''

# $1: gitlabURL
function server_clone()
{
    echo 'clone server...'

    pushd $PWD > /dev/null
    cd ../Server
    git clone $1/digame/src/server.git src/server
    git clone $1/digame/env.git env
    popd > /dev/null
}
# $1: branch
function server_pull()
{
    if [ ! -z "$1" ]
    then
        serverBranch=$1
    fi
    
    if [ "$serverBranch" = "master" ]
    then
        askDefault "server tag" "serverTag"
    fi
    
    echo "pull server...($serverBranch, $serverTag)"
    
    pushd $PWD > /dev/null
    cd ../Server/src/server
    git checkout -- ./src/digame/go.mod
    git pull origin $serverBranch
    if [ ! -z "$serverTag" ]
    then
        git checkout $serverTag
    else
        git checkout $serverBranch
    fi
    cd ../../env
    git pull
    popd > /dev/null
}
function server_build()
{
    echo "build server...($serverBranch, $serverTag)"
    
    pushd $PWD > /dev/null
    cd ../Server/src/server/src/digame
    envPath=../../../../env/server/linux
    export GO111MODULE=on
    
    if [ ! -z "$serverTag" ]
    then
        go build -ldflags="-X 'digame/server/dataserver/serverpkg.ServerVersion=$serverTag'" -o $envPath/dataserver/server.out server/dataserver/main.go
        go build -ldflags="-X 'digame/server/gameserver/serverpkg.ServerVersion=$serverTag'" -o $envPath/gameserver/server.out server/gameserver/main.go
        go build -ldflags="-X 'digame/server/betsync/serverpkg.ServerVersion=$serverTag'" -o $envPath/betsync/server.out server/betsync/main.go
        go build -ldflags="-X 'digame/server/betquery/serverpkg.ServerVersion=$serverTag'" -o $envPath/betquery/server.out server/betquery/main.go
    else
        go build -o $envPath/dataserver/server.out server/dataserver/main.go
        go build -o $envPath/gameserver/server.out server/gameserver/main.go
        go build -o $envPath/betsync/server.out server/betsync/main.go
        go build -o $envPath/betquery/server.out server/betquery/main.go
    fi
    
    cp $envPath/dataserver/server.out $envPath/../linux_demo/dataserver/server.out
    cp $envPath/gameserver/server.out $envPath/../linux_demo/gameserver/server.out
    cp $envPath/betquery/server.out $envPath/../linux_demo/betquery/server.out
    cp $envPath/dataserver/server.out $envPath/../linux_dev/dataserver/server.out
    cp $envPath/gameserver/server.out $envPath/../linux_dev/gameserver/server.out
    cp $envPath/betquery/server.out $envPath/../linux_dev/betquery/server.out
    cp $envPath/dataserver/server.out $envPath/../linux_test/dataserver/server.out
    cp $envPath/gameserver/server.out $envPath/../linux_test/gameserver/server.out
	cp $envPath/gameserver/server.out $envPath/../linux_test/gameserver2/server.out
    cp $envPath/betquery/server.out $envPath/../linux_test/betquery/server.out
    cp $envPath/dataserver/server.out $envPath/../linux_pro/dataserver/server.out
    cp $envPath/gameserver/server.out $envPath/../linux_pro/gameserver/server.out
    cp $envPath/betquery/server.out $envPath/../linux_pro/betquery/server.out
	cp $envPath/dataserver/server.out $envPath/../linux_pro_kg/dataserver/server.out
    cp $envPath/gameserver/server.out $envPath/../linux_pro_kg/gameserver/server.out
    cp $envPath/betquery/server.out $envPath/../linux_pro_kg/betquery/server.out
    
    popd > /dev/null
    
    pushd $PWD > /dev/null
    cd ../Server/src/server/src/digame
    envPath=../../../../env/wallet/linux
    export GO111MODULE=on
    
    go build -ldflags="-X 'digame/wallet/wallet/serverpkg.ServerVersion=$serverTag'" -o $envPath/wallet/server.out wallet/wallet/main.go
    
    if [ "$serverBranch" = "master" ]
    then
        cp $envPath/wallet/server.out $envPath/../linux_test/wallet/server.out
        cp $envPath/wallet/server.out $envPath/../linux_pro/wallet/server.out
		cp $envPath/wallet/server.out $envPath/../linux_pro_kg/wallet/server.out
    fi
    popd > /dev/null
}
function server_commit()
{
    echo "commit server...($serverBranch, $serverTag)"
    
    if [ "$serverBranch" = "master" ]
    then
        if [ -z "$serverTag" ]
        then
            echo "no tag specified"
            return 
        fi
    fi
    
    pushd $PWD > /dev/null
    cd ../Server/env
    commit_comment="[srv] add. linux server upload"
    askDefault "commit comment" "commit_comment"
    printf -v commit_comment_escape %b "$commit_comment"
    git add *.out
    git commit -m "$commit_comment_escape"
    if [ ! -z "$serverTag" ]
    then
        git tag $serverTag
        git push origin $serverBranch : $serverTag
    else
        git push origin $serverBranch
    fi
    popd > /dev/null
}
# $1: pem, $2: linuxDir, $3: dstURL
function server_deploy_with_key()
{
    echo 'deploy server...'
    
    envPath=../Server/env
    ssh -i $1 $3 'docker-compose -f DockerArea/server/docker-compose.yml stop'
    sleep 1
    scp -i $1 -r $envPath/server/$2/* $3:~/Server/server/
    scp -i $1 -r $envPath/wallet/linux/* $3:~/Server/wallet/
    sleep 1
    ssh -i $1 $3 'docker-compose -f DockerArea/server/docker-compose.yml down'
    sleep 1
    ssh -i $1 $3 'docker-compose -f DockerArea/server/docker-compose.yml up -d'
}
# $1: password, $2: linuxDir, $3: dstURL, $4: port
function server_deploy_with_password()
{
    echo 'deploy server...'
    
    envPath=../Server/env
    sshpass -p $1 ssh $3 -p$4 'docker-compose -f DockerArea/server/docker-compose.yml stop'
    sleep 1
    sshpass -p $1 scp -P$4 -r $envPath/server/$2/* $3:~/Server/server/
    sshpass -p $1 scp -P$4 -r $envPath/wallet/linux/* $3:~/Server/wallet/
    sleep 1
    sshpass -p $1 ssh $3 -p$4 'docker-compose -f DockerArea/server/docker-compose.yml down'
    sleep 1
    sshpass -p $1 ssh $3 -p$4 'docker-compose -f DockerArea/server/docker-compose.yml up -d'
}
